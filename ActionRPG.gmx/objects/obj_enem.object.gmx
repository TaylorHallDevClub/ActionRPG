<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>enemy_collider</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
dir       = -1;
moveSpeed = 3;
grav      = 0.5;
hsp       = 0;
vsp       = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Step

//Move L and R
hsp = dir * moveSpeed; //is 3 or -3
vsp += grav; //iteration of 'vsp' until enemy is grounded

//Animate
if(hsp != 0) image_xscale = -dir; //dir is returning a positive or negative value. neg enemy moves left. positive the enemy moves right.
if(place_meeting(x, y + 1, obj_collider)) //check if enemy is grounded
{
    if(hsp != 0){sprite_index = enemy; image_speed = 0.3;} //TODO: chagne '0.3' to VAR
                                                           //good for now. need enemy attack. when attack set 'hsp' to 0
    //else {sprite_index = enemy_attack; image_speed = 0.0;} //TODO: create ATTACK                                            
}
/*else //if not on the ground
{
    if(vsp &lt; 0)sprite_index = ply_jump; //if player is belowe max arch i.e. on the way up
    else sprite_index = ply_fall; //other wise, he's on his way down
}*/// TODO: use only if we create a enemy jump animation

//Horizontal Collision
if(place_meeting(x + hsp, y, obj_collider))
{
    while(!place_meeting(x + sign(hsp), y, obj_collider)) //sign returns -1 or 1 respective of hsp's sign
    {
        x += sign(hsp); //move until collider is 1 pixel to L or R 
    }
    hsp = 0; //after collision, jump out of while loop and move no further, hsp = 0
    dir *= -1; //flip the respective direction of the enemy
}

//Vertical Collision
if(place_meeting(x, y + vsp, obj_collider))
{
    while(!place_meeting(x, y + sign(vsp), obj_collider)) //sign returns -1 or 1 respective of vsp's sign
    {
        y += sign(vsp); //move until collider is 1 pixel below player
    }
    vsp = 0; //after collision, jump out of while loop and stop falling, vsp = 0
}

//Attack or Collisino Check with Player Object
if(place_meeting(x, y, obj_ply)) //if touching player
{
    if(obj_ply.y &lt; y - 16) //if player touching top of enemy
    {
        with(obj_ply) vsp = -jumpSpeed; //player will bounce. 'jumpSpeed' is a player VAR
        instance_destroy(); //TODO: death animation than destroy
    }
    else if(obj_ply.attack == true) instance_destroy(); //usinf '.' seperator to access the 'attack' VAR in obj_ply
    else
    {
        game_restart(); //TODO: replace with player health reduction
    }
}

//Apply Behavior
x += hsp;
y += vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
